name: CI - Windows PowerShell

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  windows-powershell-test:
    name: Windows PowerShell 5.1 Tests
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Verify Windows PowerShell version
      shell: powershell
      run: |
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)"
        Write-Host "Platform: $($PSVersionTable.Platform)"
        Write-Host "OS: $($PSVersionTable.OS)"
        if ($PSVersionTable.PSVersion.Major -lt 5) {
          throw "This project requires PowerShell 5.1 or higher"
        }
    
    - name: Install Pester testing framework
      shell: powershell
      run: |
        Write-Host "Installing Pester for Windows PowerShell testing..."
        Install-Module -Name Pester -Force -SkipPublisherCheck
        Import-Module Pester
        Write-Host "Pester version: $(Get-Module Pester | Select-Object -ExpandProperty Version)"
    
    - name: Run Windows PowerShell Tests
      shell: powershell
      run: |
        Write-Host "Running tests on Windows PowerShell..." -ForegroundColor Cyan
        if (Test-Path "tests") {
          Write-Host "Executing Pester tests..." -ForegroundColor Yellow
          $result = Invoke-Pester -Path "tests" -OutputFormat NUnitXml -OutputFile "TestResults.xml" -PassThru
          if ($result.FailedCount -gt 0) {
            Write-Host "❌ $($result.FailedCount) tests failed" -ForegroundColor Red
            exit 1
          } else {
            Write-Host "✅ All $($result.PassedCount) tests passed" -ForegroundColor Green
          }
        } else {
          Write-Host "No tests directory found, running Windows PowerShell syntax validation..." -ForegroundColor Yellow
          $syntaxErrors = $false
          Get-ChildItem -Path . -Filter "*.ps1" -Recurse | ForEach-Object {
            Write-Host "Validating $($_.Name)..." -ForegroundColor Gray
            $errors = $null
            $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $_.FullName -Raw), [ref]$errors)
            if ($errors.Count -gt 0) {
              Write-Host "❌ Syntax errors in $($_.Name):" -ForegroundColor Red
              $errors | ForEach-Object { Write-Host "  $($_.Message)" -ForegroundColor Red }
              $syntaxErrors = $true
            } else {
              Write-Host "✅ $($_.Name) syntax valid" -ForegroundColor Green
            }
          }
          if ($syntaxErrors) {
            Write-Host "❌ PowerShell syntax validation failed" -ForegroundColor Red
            exit 1
          } else {
            Write-Host "✅ All PowerShell files have valid Windows PowerShell syntax" -ForegroundColor Green
          }
        }

    - name: Test Windows Forms Dependencies
      shell: powershell
      run: |
        Write-Host "Testing Windows Forms availability..." -ForegroundColor Cyan
        try {
          Add-Type -AssemblyName System.Windows.Forms
          Add-Type -AssemblyName System.Drawing
          Add-Type -AssemblyName PresentationFramework
          Write-Host "✅ Windows Forms assemblies loaded successfully" -ForegroundColor Green
        } catch {
          Write-Host "❌ Failed to load Windows Forms assemblies: $_" -ForegroundColor Red
          exit 1
        }
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: windows-powershell-test-results
        path: TestResults.xml

  markdown-lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Lint Markdown files
      uses: articulate/actions-markdownlint@v1
      with:
        config: .markdownlint.json
        files: '**/*.md'
        ignore: node_modules
