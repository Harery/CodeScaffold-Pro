# FileGeneration.ps1 - File generation functions for CodeScaffold Pro

function New-MainPy {
    param([string]$TemplateType)

    return @"
#!/usr/bin/env python3
"""
Python Project Template
A simple starting point for your Python application.
"""

import sys
import os
from datetime import datetime

def main():
    """Main function - entry point of the application."""
    print("üêç Python Project Started!")
    print(f"üìÖ Current time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üêç Python version: {sys.version}")
    print(f"üìÅ Working directory: {os.getcwd()}")
    
    # Your code here
    print("\n‚úÖ Ready to build something amazing!")

if __name__ == "__main__":
    main()
    # Keep the container alive for development/testing
    import time
    while True:
        time.sleep(60)
"@
}

function New-Dockerfile {
    param([string]$TemplateType)
    
    return @"
FROM python:3.11-slim

WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Run the application
CMD ["python", "main.py"]
"@
}

function New-RequirementsTxt {
    param([array]$Dependencies)
    
    if ($Dependencies.Count -eq 0) {
        return "# Add your project dependencies here"
    }
    $output = @()
    $output += "# ====================================================================="
    $output += "#  requirements.txt - Python Project Dependencies"
    $output += "#  Generated by CodeScaffold Pro | https://github.com/Harery/CodeScaffold-Pro"
    $output += "# ====================================================================="
    $output += "#"
    $output += "#  üêç  Core Python packaging & environment tools"
    $core = @("pip", "virtualenv", "setuptools", "wheel")
    foreach ($dep in $core) {
        if ($Dependencies -contains $dep) { $output += $dep }
    }
    $output += ""
    $output += "# ---------------------------------------------------------------------"
    $output += "#  üõ†Ô∏è  Development, formatting & logging"
    $dev = @("black", "rich", "loguru")
    foreach ($dep in $dev) {
        if ($Dependencies -contains $dep) { $output += $dep }
    }
    $output += ""
    $output += "# ---------------------------------------------------------------------"
    $output += "#  ‚öôÔ∏è  CLI, configuration & utility"
    $cli = @("python-dotenv", "typer")
    foreach ($dep in $cli) {
        if ($Dependencies -contains $dep) { $output += $dep }
    }
    $output += ""
    $output += "# ---------------------------------------------------------------------"
    $output += "#  ‚ûï  Add your additional dependencies below"
    $output += "#  Example: requests>=2.28.0"
    $output += "# ---------------------------------------------------------------------"
    # Add any other dependencies not already listed
    $allGroups = $core + $dev + $cli
    foreach ($dep in $Dependencies) {
        if ($allGroups -notcontains $dep) { $output += $dep }
    }
    return ($output -join "`n")
}

function New-ReadmeMd {
    param([string]$ProjectName, [string]$TemplateName)
    
    return @"
# $ProjectName

A Python project created with the **$TemplateName** template.

## üöÄ Quick Start

### Prerequisites

- Python 3.8+
- pip package manager

### Installation

1. Clone this repository
2. Create a virtual environment:

   ``````bash
   python -m venv venv
   ``````

3. Activate the virtual environment:
   - Windows: ``venv\Scripts\activate``
   - macOS/Linux: ``source venv/bin/activate``

4. Install dependencies:

   ``````bash
   pip install -r requirements.txt
   ``````

### Running the Application

``````bash
python main.py
``````

## üê≥ Docker Support

Build and run with Docker:

``````bash
# Build the image
docker build -t $ProjectName .

# Run the container
docker run -p 8000:8000 $ProjectName
``````

## üõ†Ô∏è Development

This project includes:

- Modern Python project structure
- Docker support for containerization
- DevContainer support for VS Code
- Git initialization

### DevContainer

Open this project in VS Code and use the "Reopen in Container" option for a fully configured development environment.

## üìù License

This project is open source and available under the [MIT License](LICENSE).

## ü§ù Contributing

Contributions, issues, and feature requests are welcome!

---

*Generated with Python Project Generator* üêç
"@
}

function New-GitIgnore {
    return @"
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
Pipfile.lock

# poetry
poetry.lock

# pdm
.pdm.toml

# PEP 582
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
.idea/

# VS Code
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json

# macOS
.DS_Store

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini

# Project specific
*.log
analysis_plots.png
"@
}

function New-ProjectConfig {
    param([string]$ProjectName, [string]$TemplateType)
    
    return @"
[project]
name = "$ProjectName"
template = "$TemplateType"
created = "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
generator = "Python Project Generator v1.0"

[settings]
python_version = "3.11"
encoding = "utf-8"

[features]
docker_support = true
devcontainer_support = true
git_initialized = true
"@
}

function New-DevContainer {
    return @"
{
    "name": "Python Development Container",
    "image": "mcr.microsoft.com/devcontainers/python:3.11",
    "features": {
        "ghcr.io/devcontainers/features/git:1": {},
        "ghcr.io/devcontainers/features/docker-in-docker:2": {}
    },
    "customizations": {
        "vscode": {
            "extensions": [
                "ms-python.python",
                "ms-python.black-formatter",
                "ms-python.flake8",
                "ms-python.pylint",
                "ms-toolsai.jupyter",
                "ms-vscode.vscode-json"
            ],
            "settings": {
                "python.defaultInterpreterPath": "/usr/local/bin/python",
                "python.formatting.provider": "black",
                "python.linting.enabled": true,
                "python.linting.flake8Enabled": true,
                "editor.formatOnSave": true
            }
        }
    },
    "postCreateCommand": "pip install -r requirements.txt",
    "remoteUser": "vscode"
}
"@
}

function New-DockerCompose {
    param([string]$ProjectName, [string]$CustomCommand, [int]$HostPort = 8000)
    $lines = @()
    $lines += "version: '3.8'"
    $lines += "services:"
    $lines += "  '$ProjectName':"
    $lines += "    build: ."
    $lines += "    image: ${ProjectName}:latest"
    $lines += "    container_name: ${ProjectName}_app"
    $lines += "    volumes:"
    $lines += "      - .:/app"
    $lines += "    command: $CustomCommand"
    $lines += "    ports:"
    $lines += "      - `"${HostPort}:8000`""
    return ($lines -join "`n")
}
